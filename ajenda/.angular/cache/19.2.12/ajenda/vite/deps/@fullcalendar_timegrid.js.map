{
  "version": 3,
  "sources": ["../../../../../../node_modules/@fullcalendar/timegrid/internal.js", "../../../../../../node_modules/@fullcalendar/timegrid/index.js"],
  "sourcesContent": ["import { Splitter, hasBgRendering, createFormatter, ViewContextType, ContentContainer, BaseComponent, DateComponent, diffDays, buildNavLinkAttrs, WeekNumberContainer, getStickyHeaderDates, ViewContainer, SimpleScrollGrid, getStickyFooterScrollbar, NowTimer, NowIndicatorContainer, renderScrollShim, rangeContainsMarker, startOfDay, asRoughMs, createDuration, RefMap, PositionCache, MoreLinkContainer, SegHierarchy, groupIntersectingEntries, binarySearch, getEntrySpanEnd, buildEntryKey, StandardEvent, memoize, sortEventSegs, DayCellContainer, hasCustomDayCellContent, getSegMeta, buildIsoString, computeEarliestSegStart, buildEventRangeKey, BgEvent, renderFill, addDurations, multiplyDuration, wholeDivideDurations, Slicer, intersectRanges, formatIsoTimeString, DayHeader, DaySeriesModel, DayTableModel, injectStyles } from '@fullcalendar/core/internal.js';\nimport { createElement, createRef, Fragment } from '@fullcalendar/core/preact.js';\nimport { DayTable } from '@fullcalendar/daygrid/internal.js';\nclass AllDaySplitter extends Splitter {\n  getKeyInfo() {\n    return {\n      allDay: {},\n      timed: {}\n    };\n  }\n  getKeysForDateSpan(dateSpan) {\n    if (dateSpan.allDay) {\n      return ['allDay'];\n    }\n    return ['timed'];\n  }\n  getKeysForEventDef(eventDef) {\n    if (!eventDef.allDay) {\n      return ['timed'];\n    }\n    if (hasBgRendering(eventDef)) {\n      return ['timed', 'allDay'];\n    }\n    return ['allDay'];\n  }\n}\nconst DEFAULT_SLAT_LABEL_FORMAT = createFormatter({\n  hour: 'numeric',\n  minute: '2-digit',\n  omitZeroMinute: true,\n  meridiem: 'short'\n});\nfunction TimeColsAxisCell(props) {\n  let classNames = ['fc-timegrid-slot', 'fc-timegrid-slot-label', props.isLabeled ? 'fc-scrollgrid-shrink' : 'fc-timegrid-slot-minor'];\n  return createElement(ViewContextType.Consumer, null, context => {\n    if (!props.isLabeled) {\n      return createElement(\"td\", {\n        className: classNames.join(' '),\n        \"data-time\": props.isoTimeStr\n      });\n    }\n    let {\n      dateEnv,\n      options,\n      viewApi\n    } = context;\n    let labelFormat =\n    // TODO: fully pre-parse\n    options.slotLabelFormat == null ? DEFAULT_SLAT_LABEL_FORMAT : Array.isArray(options.slotLabelFormat) ? createFormatter(options.slotLabelFormat[0]) : createFormatter(options.slotLabelFormat);\n    let renderProps = {\n      level: 0,\n      time: props.time,\n      date: dateEnv.toDate(props.date),\n      view: viewApi,\n      text: dateEnv.format(props.date, labelFormat)\n    };\n    return createElement(ContentContainer, {\n      elTag: \"td\",\n      elClasses: classNames,\n      elAttrs: {\n        'data-time': props.isoTimeStr\n      },\n      renderProps: renderProps,\n      generatorName: \"slotLabelContent\",\n      customGenerator: options.slotLabelContent,\n      defaultGenerator: renderInnerContent,\n      classNameGenerator: options.slotLabelClassNames,\n      didMount: options.slotLabelDidMount,\n      willUnmount: options.slotLabelWillUnmount\n    }, InnerContent => createElement(\"div\", {\n      className: \"fc-timegrid-slot-label-frame fc-scrollgrid-shrink-frame\"\n    }, createElement(InnerContent, {\n      elTag: \"div\",\n      elClasses: ['fc-timegrid-slot-label-cushion', 'fc-scrollgrid-shrink-cushion']\n    })));\n  });\n}\nfunction renderInnerContent(props) {\n  return props.text;\n}\nclass TimeBodyAxis extends BaseComponent {\n  render() {\n    return this.props.slatMetas.map(slatMeta => createElement(\"tr\", {\n      key: slatMeta.key\n    }, createElement(TimeColsAxisCell, Object.assign({}, slatMeta))));\n  }\n}\nconst DEFAULT_WEEK_NUM_FORMAT = createFormatter({\n  week: 'short'\n});\nconst AUTO_ALL_DAY_MAX_EVENT_ROWS = 5;\nclass TimeColsView extends DateComponent {\n  constructor() {\n    super(...arguments);\n    this.allDaySplitter = new AllDaySplitter(); // for use by subclasses\n    this.headerElRef = createRef();\n    this.rootElRef = createRef();\n    this.scrollerElRef = createRef();\n    this.state = {\n      slatCoords: null\n    };\n    this.handleScrollTopRequest = scrollTop => {\n      let scrollerEl = this.scrollerElRef.current;\n      if (scrollerEl) {\n        // TODO: not sure how this could ever be null. weirdness with the reducer\n        scrollerEl.scrollTop = scrollTop;\n      }\n    };\n    /* Header Render Methods\n    ------------------------------------------------------------------------------------------------------------------*/\n    this.renderHeadAxis = (rowKey, frameHeight = '') => {\n      let {\n        options\n      } = this.context;\n      let {\n        dateProfile\n      } = this.props;\n      let range = dateProfile.renderRange;\n      let dayCnt = diffDays(range.start, range.end);\n      // only do in day views (to avoid doing in week views that dont need it)\n      let navLinkAttrs = dayCnt === 1 ? buildNavLinkAttrs(this.context, range.start, 'week') : {};\n      if (options.weekNumbers && rowKey === 'day') {\n        return createElement(WeekNumberContainer, {\n          elTag: \"th\",\n          elClasses: ['fc-timegrid-axis', 'fc-scrollgrid-shrink'],\n          elAttrs: {\n            'aria-hidden': true\n          },\n          date: range.start,\n          defaultFormat: DEFAULT_WEEK_NUM_FORMAT\n        }, InnerContent => createElement(\"div\", {\n          className: ['fc-timegrid-axis-frame', 'fc-scrollgrid-shrink-frame', 'fc-timegrid-axis-frame-liquid'].join(' '),\n          style: {\n            height: frameHeight\n          }\n        }, createElement(InnerContent, {\n          elTag: \"a\",\n          elClasses: ['fc-timegrid-axis-cushion', 'fc-scrollgrid-shrink-cushion', 'fc-scrollgrid-sync-inner'],\n          elAttrs: navLinkAttrs\n        })));\n      }\n      return createElement(\"th\", {\n        \"aria-hidden\": true,\n        className: \"fc-timegrid-axis\"\n      }, createElement(\"div\", {\n        className: \"fc-timegrid-axis-frame\",\n        style: {\n          height: frameHeight\n        }\n      }));\n    };\n    /* Table Component Render Methods\n    ------------------------------------------------------------------------------------------------------------------*/\n    // only a one-way height sync. we don't send the axis inner-content height to the DayGrid,\n    // but DayGrid still needs to have classNames on inner elements in order to measure.\n    this.renderTableRowAxis = rowHeight => {\n      let {\n        options,\n        viewApi\n      } = this.context;\n      let renderProps = {\n        text: options.allDayText,\n        view: viewApi\n      };\n      return (\n        // TODO: make reusable hook. used in list view too\n        createElement(ContentContainer, {\n          elTag: \"td\",\n          elClasses: ['fc-timegrid-axis', 'fc-scrollgrid-shrink'],\n          elAttrs: {\n            'aria-hidden': true\n          },\n          renderProps: renderProps,\n          generatorName: \"allDayContent\",\n          customGenerator: options.allDayContent,\n          defaultGenerator: renderAllDayInner,\n          classNameGenerator: options.allDayClassNames,\n          didMount: options.allDayDidMount,\n          willUnmount: options.allDayWillUnmount\n        }, InnerContent => createElement(\"div\", {\n          className: ['fc-timegrid-axis-frame', 'fc-scrollgrid-shrink-frame', rowHeight == null ? ' fc-timegrid-axis-frame-liquid' : ''].join(' '),\n          style: {\n            height: rowHeight\n          }\n        }, createElement(InnerContent, {\n          elTag: \"span\",\n          elClasses: ['fc-timegrid-axis-cushion', 'fc-scrollgrid-shrink-cushion', 'fc-scrollgrid-sync-inner']\n        })))\n      );\n    };\n    this.handleSlatCoords = slatCoords => {\n      this.setState({\n        slatCoords\n      });\n    };\n  }\n  // rendering\n  // ----------------------------------------------------------------------------------------------------\n  renderSimpleLayout(headerRowContent, allDayContent, timeContent) {\n    let {\n      context,\n      props\n    } = this;\n    let sections = [];\n    let stickyHeaderDates = getStickyHeaderDates(context.options);\n    if (headerRowContent) {\n      sections.push({\n        type: 'header',\n        key: 'header',\n        isSticky: stickyHeaderDates,\n        chunk: {\n          elRef: this.headerElRef,\n          tableClassName: 'fc-col-header',\n          rowContent: headerRowContent\n        }\n      });\n    }\n    if (allDayContent) {\n      sections.push({\n        type: 'body',\n        key: 'all-day',\n        chunk: {\n          content: allDayContent\n        }\n      });\n      sections.push({\n        type: 'body',\n        key: 'all-day-divider',\n        outerContent:\n        // TODO: rename to cellContent so don't need to define <tr>?\n        createElement(\"tr\", {\n          role: \"presentation\",\n          className: \"fc-scrollgrid-section\"\n        }, createElement(\"td\", {\n          className: 'fc-timegrid-divider ' + context.theme.getClass('tableCellShaded')\n        }))\n      });\n    }\n    sections.push({\n      type: 'body',\n      key: 'body',\n      liquid: true,\n      expandRows: Boolean(context.options.expandRows),\n      chunk: {\n        scrollerElRef: this.scrollerElRef,\n        content: timeContent\n      }\n    });\n    return createElement(ViewContainer, {\n      elRef: this.rootElRef,\n      elClasses: ['fc-timegrid'],\n      viewSpec: context.viewSpec\n    }, createElement(SimpleScrollGrid, {\n      liquid: !props.isHeightAuto && !props.forPrint,\n      collapsibleWidth: props.forPrint,\n      cols: [{\n        width: 'shrink'\n      }],\n      sections: sections\n    }));\n  }\n  renderHScrollLayout(headerRowContent, allDayContent, timeContent, colCnt, dayMinWidth, slatMetas, slatCoords) {\n    let ScrollGrid = this.context.pluginHooks.scrollGridImpl;\n    if (!ScrollGrid) {\n      throw new Error('No ScrollGrid implementation');\n    }\n    let {\n      context,\n      props\n    } = this;\n    let stickyHeaderDates = !props.forPrint && getStickyHeaderDates(context.options);\n    let stickyFooterScrollbar = !props.forPrint && getStickyFooterScrollbar(context.options);\n    let sections = [];\n    if (headerRowContent) {\n      sections.push({\n        type: 'header',\n        key: 'header',\n        isSticky: stickyHeaderDates,\n        syncRowHeights: true,\n        chunks: [{\n          key: 'axis',\n          rowContent: arg => createElement(\"tr\", {\n            role: \"presentation\"\n          }, this.renderHeadAxis('day', arg.rowSyncHeights[0]))\n        }, {\n          key: 'cols',\n          elRef: this.headerElRef,\n          tableClassName: 'fc-col-header',\n          rowContent: headerRowContent\n        }]\n      });\n    }\n    if (allDayContent) {\n      sections.push({\n        type: 'body',\n        key: 'all-day',\n        syncRowHeights: true,\n        chunks: [{\n          key: 'axis',\n          rowContent: contentArg => createElement(\"tr\", {\n            role: \"presentation\"\n          }, this.renderTableRowAxis(contentArg.rowSyncHeights[0]))\n        }, {\n          key: 'cols',\n          content: allDayContent\n        }]\n      });\n      sections.push({\n        key: 'all-day-divider',\n        type: 'body',\n        outerContent:\n        // TODO: rename to cellContent so don't need to define <tr>?\n        createElement(\"tr\", {\n          role: \"presentation\",\n          className: \"fc-scrollgrid-section\"\n        }, createElement(\"td\", {\n          colSpan: 2,\n          className: 'fc-timegrid-divider ' + context.theme.getClass('tableCellShaded')\n        }))\n      });\n    }\n    let isNowIndicator = context.options.nowIndicator;\n    sections.push({\n      type: 'body',\n      key: 'body',\n      liquid: true,\n      expandRows: Boolean(context.options.expandRows),\n      chunks: [{\n        key: 'axis',\n        content: arg =>\n        // TODO: make this now-indicator arrow more DRY with TimeColsContent\n        createElement(\"div\", {\n          className: \"fc-timegrid-axis-chunk\"\n        }, createElement(\"table\", {\n          \"aria-hidden\": true,\n          style: {\n            height: arg.expandRows ? arg.clientHeight : ''\n          }\n        }, arg.tableColGroupNode, createElement(\"tbody\", null, createElement(TimeBodyAxis, {\n          slatMetas: slatMetas\n        }))), createElement(\"div\", {\n          className: \"fc-timegrid-now-indicator-container\"\n        }, createElement(NowTimer, {\n          unit: isNowIndicator ? 'minute' : 'day' /* hacky */\n        }, nowDate => {\n          let nowIndicatorTop = isNowIndicator && slatCoords && slatCoords.safeComputeTop(nowDate); // might return void\n          if (typeof nowIndicatorTop === 'number') {\n            return createElement(NowIndicatorContainer, {\n              elClasses: ['fc-timegrid-now-indicator-arrow'],\n              elStyle: {\n                top: nowIndicatorTop\n              },\n              isAxis: true,\n              date: nowDate\n            });\n          }\n          return null;\n        })))\n      }, {\n        key: 'cols',\n        scrollerElRef: this.scrollerElRef,\n        content: timeContent\n      }]\n    });\n    if (stickyFooterScrollbar) {\n      sections.push({\n        key: 'footer',\n        type: 'footer',\n        isSticky: true,\n        chunks: [{\n          key: 'axis',\n          content: renderScrollShim\n        }, {\n          key: 'cols',\n          content: renderScrollShim\n        }]\n      });\n    }\n    return createElement(ViewContainer, {\n      elRef: this.rootElRef,\n      elClasses: ['fc-timegrid'],\n      viewSpec: context.viewSpec\n    }, createElement(ScrollGrid, {\n      liquid: !props.isHeightAuto && !props.forPrint,\n      forPrint: props.forPrint,\n      collapsibleWidth: false,\n      colGroups: [{\n        width: 'shrink',\n        cols: [{\n          width: 'shrink'\n        }]\n      }, {\n        cols: [{\n          span: colCnt,\n          minWidth: dayMinWidth\n        }]\n      }],\n      sections: sections\n    }));\n  }\n  /* Dimensions\n  ------------------------------------------------------------------------------------------------------------------*/\n  getAllDayMaxEventProps() {\n    let {\n      dayMaxEvents,\n      dayMaxEventRows\n    } = this.context.options;\n    if (dayMaxEvents === true || dayMaxEventRows === true) {\n      // is auto?\n      dayMaxEvents = undefined;\n      dayMaxEventRows = AUTO_ALL_DAY_MAX_EVENT_ROWS; // make sure \"auto\" goes to a real number\n    }\n    return {\n      dayMaxEvents,\n      dayMaxEventRows\n    };\n  }\n}\nfunction renderAllDayInner(renderProps) {\n  return renderProps.text;\n}\nclass TimeColsSlatsCoords {\n  constructor(positions, dateProfile, slotDuration) {\n    this.positions = positions;\n    this.dateProfile = dateProfile;\n    this.slotDuration = slotDuration;\n  }\n  safeComputeTop(date) {\n    let {\n      dateProfile\n    } = this;\n    if (rangeContainsMarker(dateProfile.currentRange, date)) {\n      let startOfDayDate = startOfDay(date);\n      let timeMs = date.valueOf() - startOfDayDate.valueOf();\n      if (timeMs >= asRoughMs(dateProfile.slotMinTime) && timeMs < asRoughMs(dateProfile.slotMaxTime)) {\n        return this.computeTimeTop(createDuration(timeMs));\n      }\n    }\n    return null;\n  }\n  // Computes the top coordinate, relative to the bounds of the grid, of the given date.\n  // A `startOfDayDate` must be given for avoiding ambiguity over how to treat midnight.\n  computeDateTop(when, startOfDayDate) {\n    if (!startOfDayDate) {\n      startOfDayDate = startOfDay(when);\n    }\n    return this.computeTimeTop(createDuration(when.valueOf() - startOfDayDate.valueOf()));\n  }\n  // Computes the top coordinate, relative to the bounds of the grid, of the given time (a Duration).\n  // This is a makeshify way to compute the time-top. Assumes all slatMetas dates are uniform.\n  // Eventually allow computation with arbirary slat dates.\n  computeTimeTop(duration) {\n    let {\n      positions,\n      dateProfile\n    } = this;\n    let len = positions.els.length;\n    // floating-point value of # of slots covered\n    let slatCoverage = (duration.milliseconds - asRoughMs(dateProfile.slotMinTime)) / asRoughMs(this.slotDuration);\n    let slatIndex;\n    let slatRemainder;\n    // compute a floating-point number for how many slats should be progressed through.\n    // from 0 to number of slats (inclusive)\n    // constrained because slotMinTime/slotMaxTime might be customized.\n    slatCoverage = Math.max(0, slatCoverage);\n    slatCoverage = Math.min(len, slatCoverage);\n    // an integer index of the furthest whole slat\n    // from 0 to number slats (*exclusive*, so len-1)\n    slatIndex = Math.floor(slatCoverage);\n    slatIndex = Math.min(slatIndex, len - 1);\n    // how much further through the slatIndex slat (from 0.0-1.0) must be covered in addition.\n    // could be 1.0 if slatCoverage is covering *all* the slots\n    slatRemainder = slatCoverage - slatIndex;\n    return positions.tops[slatIndex] + positions.getHeight(slatIndex) * slatRemainder;\n  }\n}\nclass TimeColsSlatsBody extends BaseComponent {\n  render() {\n    let {\n      props,\n      context\n    } = this;\n    let {\n      options\n    } = context;\n    let {\n      slatElRefs\n    } = props;\n    return createElement(\"tbody\", null, props.slatMetas.map((slatMeta, i) => {\n      let renderProps = {\n        time: slatMeta.time,\n        date: context.dateEnv.toDate(slatMeta.date),\n        view: context.viewApi\n      };\n      return createElement(\"tr\", {\n        key: slatMeta.key,\n        ref: slatElRefs.createRef(slatMeta.key)\n      }, props.axis && createElement(TimeColsAxisCell, Object.assign({}, slatMeta)), createElement(ContentContainer, {\n        elTag: \"td\",\n        elClasses: ['fc-timegrid-slot', 'fc-timegrid-slot-lane', !slatMeta.isLabeled && 'fc-timegrid-slot-minor'],\n        elAttrs: {\n          'data-time': slatMeta.isoTimeStr\n        },\n        renderProps: renderProps,\n        generatorName: \"slotLaneContent\",\n        customGenerator: options.slotLaneContent,\n        classNameGenerator: options.slotLaneClassNames,\n        didMount: options.slotLaneDidMount,\n        willUnmount: options.slotLaneWillUnmount\n      }));\n    }));\n  }\n}\n\n/*\nfor the horizontal \"slats\" that run width-wise. Has a time axis on a side. Depends on RTL.\n*/\nclass TimeColsSlats extends BaseComponent {\n  constructor() {\n    super(...arguments);\n    this.rootElRef = createRef();\n    this.slatElRefs = new RefMap();\n  }\n  render() {\n    let {\n      props,\n      context\n    } = this;\n    return createElement(\"div\", {\n      ref: this.rootElRef,\n      className: \"fc-timegrid-slots\"\n    }, createElement(\"table\", {\n      \"aria-hidden\": true,\n      className: context.theme.getClass('table'),\n      style: {\n        minWidth: props.tableMinWidth,\n        width: props.clientWidth,\n        height: props.minHeight\n      }\n    }, props.tableColGroupNode /* relies on there only being a single <col> for the axis */, createElement(TimeColsSlatsBody, {\n      slatElRefs: this.slatElRefs,\n      axis: props.axis,\n      slatMetas: props.slatMetas\n    })));\n  }\n  componentDidMount() {\n    this.updateSizing();\n  }\n  componentDidUpdate() {\n    this.updateSizing();\n  }\n  componentWillUnmount() {\n    if (this.props.onCoords) {\n      this.props.onCoords(null);\n    }\n  }\n  updateSizing() {\n    let {\n      context,\n      props\n    } = this;\n    if (props.onCoords && props.clientWidth !== null // means sizing has stabilized\n    ) {\n      let rootEl = this.rootElRef.current;\n      if (rootEl.offsetHeight) {\n        // not hidden by css\n        props.onCoords(new TimeColsSlatsCoords(new PositionCache(this.rootElRef.current, collectSlatEls(this.slatElRefs.currentMap, props.slatMetas), false, true), this.props.dateProfile, context.options.slotDuration));\n      }\n    }\n  }\n}\nfunction collectSlatEls(elMap, slatMetas) {\n  return slatMetas.map(slatMeta => elMap[slatMeta.key]);\n}\nfunction splitSegsByCol(segs, colCnt) {\n  let segsByCol = [];\n  let i;\n  for (i = 0; i < colCnt; i += 1) {\n    segsByCol.push([]);\n  }\n  if (segs) {\n    for (i = 0; i < segs.length; i += 1) {\n      segsByCol[segs[i].col].push(segs[i]);\n    }\n  }\n  return segsByCol;\n}\nfunction splitInteractionByCol(ui, colCnt) {\n  let byRow = [];\n  if (!ui) {\n    for (let i = 0; i < colCnt; i += 1) {\n      byRow[i] = null;\n    }\n  } else {\n    for (let i = 0; i < colCnt; i += 1) {\n      byRow[i] = {\n        affectedInstances: ui.affectedInstances,\n        isEvent: ui.isEvent,\n        segs: []\n      };\n    }\n    for (let seg of ui.segs) {\n      byRow[seg.col].segs.push(seg);\n    }\n  }\n  return byRow;\n}\nclass TimeColMoreLink extends BaseComponent {\n  render() {\n    let {\n      props\n    } = this;\n    return createElement(MoreLinkContainer, {\n      elClasses: ['fc-timegrid-more-link'],\n      elStyle: {\n        top: props.top,\n        bottom: props.bottom\n      },\n      allDayDate: null,\n      moreCnt: props.hiddenSegs.length,\n      allSegs: props.hiddenSegs,\n      hiddenSegs: props.hiddenSegs,\n      extraDateSpan: props.extraDateSpan,\n      dateProfile: props.dateProfile,\n      todayRange: props.todayRange,\n      popoverContent: () => renderPlainFgSegs(props.hiddenSegs, props),\n      defaultGenerator: renderMoreLinkInner,\n      forceTimed: true\n    }, InnerContent => createElement(InnerContent, {\n      elTag: \"div\",\n      elClasses: ['fc-timegrid-more-link-inner', 'fc-sticky']\n    }));\n  }\n}\nfunction renderMoreLinkInner(props) {\n  return props.shortText;\n}\n\n// segInputs assumed sorted\nfunction buildPositioning(segInputs, strictOrder, maxStackCnt) {\n  let hierarchy = new SegHierarchy();\n  if (strictOrder != null) {\n    hierarchy.strictOrder = strictOrder;\n  }\n  if (maxStackCnt != null) {\n    hierarchy.maxStackCnt = maxStackCnt;\n  }\n  let hiddenEntries = hierarchy.addSegs(segInputs);\n  let hiddenGroups = groupIntersectingEntries(hiddenEntries);\n  let web = buildWeb(hierarchy);\n  web = stretchWeb(web, 1); // all levelCoords/thickness will have 0.0-1.0\n  let segRects = webToRects(web);\n  return {\n    segRects,\n    hiddenGroups\n  };\n}\nfunction buildWeb(hierarchy) {\n  const {\n    entriesByLevel\n  } = hierarchy;\n  const buildNode = cacheable((level, lateral) => level + ':' + lateral, (level, lateral) => {\n    let siblingRange = findNextLevelSegs(hierarchy, level, lateral);\n    let nextLevelRes = buildNodes(siblingRange, buildNode);\n    let entry = entriesByLevel[level][lateral];\n    return [Object.assign(Object.assign({}, entry), {\n      nextLevelNodes: nextLevelRes[0]\n    }), entry.thickness + nextLevelRes[1] // the pressure builds\n    ];\n  });\n  return buildNodes(entriesByLevel.length ? {\n    level: 0,\n    lateralStart: 0,\n    lateralEnd: entriesByLevel[0].length\n  } : null, buildNode)[0];\n}\nfunction buildNodes(siblingRange, buildNode) {\n  if (!siblingRange) {\n    return [[], 0];\n  }\n  let {\n    level,\n    lateralStart,\n    lateralEnd\n  } = siblingRange;\n  let lateral = lateralStart;\n  let pairs = [];\n  while (lateral < lateralEnd) {\n    pairs.push(buildNode(level, lateral));\n    lateral += 1;\n  }\n  pairs.sort(cmpDescPressures);\n  return [pairs.map(extractNode), pairs[0][1] // first item's pressure\n  ];\n}\nfunction cmpDescPressures(a, b) {\n  return b[1] - a[1];\n}\nfunction extractNode(a) {\n  return a[0];\n}\nfunction findNextLevelSegs(hierarchy, subjectLevel, subjectLateral) {\n  let {\n    levelCoords,\n    entriesByLevel\n  } = hierarchy;\n  let subjectEntry = entriesByLevel[subjectLevel][subjectLateral];\n  let afterSubject = levelCoords[subjectLevel] + subjectEntry.thickness;\n  let levelCnt = levelCoords.length;\n  let level = subjectLevel;\n  // skip past levels that are too high up\n  for (; level < levelCnt && levelCoords[level] < afterSubject; level += 1); // do nothing\n  for (; level < levelCnt; level += 1) {\n    let entries = entriesByLevel[level];\n    let entry;\n    let searchIndex = binarySearch(entries, subjectEntry.span.start, getEntrySpanEnd);\n    let lateralStart = searchIndex[0] + searchIndex[1]; // if exact match (which doesn't collide), go to next one\n    let lateralEnd = lateralStart;\n    while (\n    // loop through entries that horizontally intersect\n    (entry = entries[lateralEnd]) &&\n    // but not past the whole seg list\n    entry.span.start < subjectEntry.span.end) {\n      lateralEnd += 1;\n    }\n    if (lateralStart < lateralEnd) {\n      return {\n        level,\n        lateralStart,\n        lateralEnd\n      };\n    }\n  }\n  return null;\n}\nfunction stretchWeb(topLevelNodes, totalThickness) {\n  const stretchNode = cacheable((node, startCoord, prevThickness) => buildEntryKey(node), (node, startCoord, prevThickness) => {\n    let {\n      nextLevelNodes,\n      thickness\n    } = node;\n    let allThickness = thickness + prevThickness;\n    let thicknessFraction = thickness / allThickness;\n    let endCoord;\n    let newChildren = [];\n    if (!nextLevelNodes.length) {\n      endCoord = totalThickness;\n    } else {\n      for (let childNode of nextLevelNodes) {\n        if (endCoord === undefined) {\n          let res = stretchNode(childNode, startCoord, allThickness);\n          endCoord = res[0];\n          newChildren.push(res[1]);\n        } else {\n          let res = stretchNode(childNode, endCoord, 0);\n          newChildren.push(res[1]);\n        }\n      }\n    }\n    let newThickness = (endCoord - startCoord) * thicknessFraction;\n    return [endCoord - newThickness, Object.assign(Object.assign({}, node), {\n      thickness: newThickness,\n      nextLevelNodes: newChildren\n    })];\n  });\n  return topLevelNodes.map(node => stretchNode(node, 0, 0)[1]);\n}\n// not sorted in any particular order\nfunction webToRects(topLevelNodes) {\n  let rects = [];\n  const processNode = cacheable((node, levelCoord, stackDepth) => buildEntryKey(node), (node, levelCoord, stackDepth) => {\n    let rect = Object.assign(Object.assign({}, node), {\n      levelCoord,\n      stackDepth,\n      stackForward: 0\n    });\n    rects.push(rect);\n    return rect.stackForward = processNodes(node.nextLevelNodes, levelCoord + node.thickness, stackDepth + 1) + 1;\n  });\n  function processNodes(nodes, levelCoord, stackDepth) {\n    let stackForward = 0;\n    for (let node of nodes) {\n      stackForward = Math.max(processNode(node, levelCoord, stackDepth), stackForward);\n    }\n    return stackForward;\n  }\n  processNodes(topLevelNodes, 0, 0);\n  return rects; // TODO: sort rects by levelCoord to be consistent with toRects?\n}\n// TODO: move to general util\nfunction cacheable(keyFunc, workFunc) {\n  const cache = {};\n  return (...args) => {\n    let key = keyFunc(...args);\n    return key in cache ? cache[key] : cache[key] = workFunc(...args);\n  };\n}\nfunction computeSegVCoords(segs, colDate, slatCoords = null, eventMinHeight = 0) {\n  let vcoords = [];\n  if (slatCoords) {\n    for (let i = 0; i < segs.length; i += 1) {\n      let seg = segs[i];\n      let spanStart = slatCoords.computeDateTop(seg.start, colDate);\n      let spanEnd = Math.max(spanStart + (eventMinHeight || 0),\n      // :(\n      slatCoords.computeDateTop(seg.end, colDate));\n      vcoords.push({\n        start: Math.round(spanStart),\n        end: Math.round(spanEnd) //\n      });\n    }\n  }\n  return vcoords;\n}\nfunction computeFgSegPlacements(segs, segVCoords,\n// might not have for every seg\neventOrderStrict, eventMaxStack) {\n  let segInputs = [];\n  let dumbSegs = []; // segs without coords\n  for (let i = 0; i < segs.length; i += 1) {\n    let vcoords = segVCoords[i];\n    if (vcoords) {\n      segInputs.push({\n        index: i,\n        thickness: 1,\n        span: vcoords\n      });\n    } else {\n      dumbSegs.push(segs[i]);\n    }\n  }\n  let {\n    segRects,\n    hiddenGroups\n  } = buildPositioning(segInputs, eventOrderStrict, eventMaxStack);\n  let segPlacements = [];\n  for (let segRect of segRects) {\n    segPlacements.push({\n      seg: segs[segRect.index],\n      rect: segRect\n    });\n  }\n  for (let dumbSeg of dumbSegs) {\n    segPlacements.push({\n      seg: dumbSeg,\n      rect: null\n    });\n  }\n  return {\n    segPlacements,\n    hiddenGroups\n  };\n}\nconst DEFAULT_TIME_FORMAT = createFormatter({\n  hour: 'numeric',\n  minute: '2-digit',\n  meridiem: false\n});\nclass TimeColEvent extends BaseComponent {\n  render() {\n    return createElement(StandardEvent, Object.assign({}, this.props, {\n      elClasses: ['fc-timegrid-event', 'fc-v-event', this.props.isShort && 'fc-timegrid-event-short'],\n      defaultTimeFormat: DEFAULT_TIME_FORMAT\n    }));\n  }\n}\nclass TimeCol extends BaseComponent {\n  constructor() {\n    super(...arguments);\n    this.sortEventSegs = memoize(sortEventSegs);\n  }\n  // TODO: memoize event-placement?\n  render() {\n    let {\n      props,\n      context\n    } = this;\n    let {\n      options\n    } = context;\n    let isSelectMirror = options.selectMirror;\n    let mirrorSegs =\n    // yuck\n    props.eventDrag && props.eventDrag.segs || props.eventResize && props.eventResize.segs || isSelectMirror && props.dateSelectionSegs || [];\n    let interactionAffectedInstances =\n    // TODO: messy way to compute this\n    props.eventDrag && props.eventDrag.affectedInstances || props.eventResize && props.eventResize.affectedInstances || {};\n    let sortedFgSegs = this.sortEventSegs(props.fgEventSegs, options.eventOrder);\n    return createElement(DayCellContainer, {\n      elTag: \"td\",\n      elRef: props.elRef,\n      elClasses: ['fc-timegrid-col', ...(props.extraClassNames || [])],\n      elAttrs: Object.assign({\n        role: 'gridcell'\n      }, props.extraDataAttrs),\n      date: props.date,\n      dateProfile: props.dateProfile,\n      todayRange: props.todayRange,\n      extraRenderProps: props.extraRenderProps\n    }, InnerContent => createElement(\"div\", {\n      className: \"fc-timegrid-col-frame\"\n    }, createElement(\"div\", {\n      className: \"fc-timegrid-col-bg\"\n    }, this.renderFillSegs(props.businessHourSegs, 'non-business'), this.renderFillSegs(props.bgEventSegs, 'bg-event'), this.renderFillSegs(props.dateSelectionSegs, 'highlight')), createElement(\"div\", {\n      className: \"fc-timegrid-col-events\"\n    }, this.renderFgSegs(sortedFgSegs, interactionAffectedInstances, false, false, false)), createElement(\"div\", {\n      className: \"fc-timegrid-col-events\"\n    }, this.renderFgSegs(mirrorSegs, {}, Boolean(props.eventDrag), Boolean(props.eventResize), Boolean(isSelectMirror), 'mirror')), createElement(\"div\", {\n      className: \"fc-timegrid-now-indicator-container\"\n    }, this.renderNowIndicator(props.nowIndicatorSegs)), hasCustomDayCellContent(options) && createElement(InnerContent, {\n      elTag: \"div\",\n      elClasses: ['fc-timegrid-col-misc']\n    })));\n  }\n  renderFgSegs(sortedFgSegs, segIsInvisible, isDragging, isResizing, isDateSelecting, forcedKey) {\n    let {\n      props\n    } = this;\n    if (props.forPrint) {\n      return renderPlainFgSegs(sortedFgSegs, props);\n    }\n    return this.renderPositionedFgSegs(sortedFgSegs, segIsInvisible, isDragging, isResizing, isDateSelecting, forcedKey);\n  }\n  renderPositionedFgSegs(segs,\n  // if not mirror, needs to be sorted\n  segIsInvisible, isDragging, isResizing, isDateSelecting, forcedKey) {\n    let {\n      eventMaxStack,\n      eventShortHeight,\n      eventOrderStrict,\n      eventMinHeight\n    } = this.context.options;\n    let {\n      date,\n      slatCoords,\n      eventSelection,\n      todayRange,\n      nowDate\n    } = this.props;\n    let isMirror = isDragging || isResizing || isDateSelecting;\n    let segVCoords = computeSegVCoords(segs, date, slatCoords, eventMinHeight);\n    let {\n      segPlacements,\n      hiddenGroups\n    } = computeFgSegPlacements(segs, segVCoords, eventOrderStrict, eventMaxStack);\n    return createElement(Fragment, null, this.renderHiddenGroups(hiddenGroups, segs), segPlacements.map(segPlacement => {\n      let {\n        seg,\n        rect\n      } = segPlacement;\n      let instanceId = seg.eventRange.instance.instanceId;\n      let isVisible = isMirror || Boolean(!segIsInvisible[instanceId] && rect);\n      let vStyle = computeSegVStyle(rect && rect.span);\n      let hStyle = !isMirror && rect ? this.computeSegHStyle(rect) : {\n        left: 0,\n        right: 0\n      };\n      let isInset = Boolean(rect) && rect.stackForward > 0;\n      let isShort = Boolean(rect) && rect.span.end - rect.span.start < eventShortHeight; // look at other places for this problem\n      return createElement(\"div\", {\n        className: 'fc-timegrid-event-harness' + (isInset ? ' fc-timegrid-event-harness-inset' : ''),\n        key: forcedKey || instanceId,\n        style: Object.assign(Object.assign({\n          visibility: isVisible ? '' : 'hidden'\n        }, vStyle), hStyle)\n      }, createElement(TimeColEvent, Object.assign({\n        seg: seg,\n        isDragging: isDragging,\n        isResizing: isResizing,\n        isDateSelecting: isDateSelecting,\n        isSelected: instanceId === eventSelection,\n        isShort: isShort\n      }, getSegMeta(seg, todayRange, nowDate))));\n    }));\n  }\n  // will already have eventMinHeight applied because segInputs already had it\n  renderHiddenGroups(hiddenGroups, segs) {\n    let {\n      extraDateSpan,\n      dateProfile,\n      todayRange,\n      nowDate,\n      eventSelection,\n      eventDrag,\n      eventResize\n    } = this.props;\n    return createElement(Fragment, null, hiddenGroups.map(hiddenGroup => {\n      let positionCss = computeSegVStyle(hiddenGroup.span);\n      let hiddenSegs = compileSegsFromEntries(hiddenGroup.entries, segs);\n      return createElement(TimeColMoreLink, {\n        key: buildIsoString(computeEarliestSegStart(hiddenSegs)),\n        hiddenSegs: hiddenSegs,\n        top: positionCss.top,\n        bottom: positionCss.bottom,\n        extraDateSpan: extraDateSpan,\n        dateProfile: dateProfile,\n        todayRange: todayRange,\n        nowDate: nowDate,\n        eventSelection: eventSelection,\n        eventDrag: eventDrag,\n        eventResize: eventResize\n      });\n    }));\n  }\n  renderFillSegs(segs, fillType) {\n    let {\n      props,\n      context\n    } = this;\n    let segVCoords = computeSegVCoords(segs, props.date, props.slatCoords, context.options.eventMinHeight); // don't assume all populated\n    let children = segVCoords.map((vcoords, i) => {\n      let seg = segs[i];\n      return createElement(\"div\", {\n        key: buildEventRangeKey(seg.eventRange),\n        className: \"fc-timegrid-bg-harness\",\n        style: computeSegVStyle(vcoords)\n      }, fillType === 'bg-event' ? createElement(BgEvent, Object.assign({\n        seg: seg\n      }, getSegMeta(seg, props.todayRange, props.nowDate))) : renderFill(fillType));\n    });\n    return createElement(Fragment, null, children);\n  }\n  renderNowIndicator(segs) {\n    let {\n      slatCoords,\n      date\n    } = this.props;\n    if (!slatCoords) {\n      return null;\n    }\n    return segs.map((seg, i) => createElement(NowIndicatorContainer\n    // key doesn't matter. will only ever be one\n    , {\n      // key doesn't matter. will only ever be one\n      key: i,\n      elClasses: ['fc-timegrid-now-indicator-line'],\n      elStyle: {\n        top: slatCoords.computeDateTop(seg.start, date)\n      },\n      isAxis: false,\n      date: date\n    }));\n  }\n  computeSegHStyle(segHCoords) {\n    let {\n      isRtl,\n      options\n    } = this.context;\n    let shouldOverlap = options.slotEventOverlap;\n    let nearCoord = segHCoords.levelCoord; // the left side if LTR. the right side if RTL. floating-point\n    let farCoord = segHCoords.levelCoord + segHCoords.thickness; // the right side if LTR. the left side if RTL. floating-point\n    let left; // amount of space from left edge, a fraction of the total width\n    let right; // amount of space from right edge, a fraction of the total width\n    if (shouldOverlap) {\n      // double the width, but don't go beyond the maximum forward coordinate (1.0)\n      farCoord = Math.min(1, nearCoord + (farCoord - nearCoord) * 2);\n    }\n    if (isRtl) {\n      left = 1 - farCoord;\n      right = nearCoord;\n    } else {\n      left = nearCoord;\n      right = 1 - farCoord;\n    }\n    let props = {\n      zIndex: segHCoords.stackDepth + 1,\n      left: left * 100 + '%',\n      right: right * 100 + '%'\n    };\n    if (shouldOverlap && !segHCoords.stackForward) {\n      // add padding to the edge so that forward stacked events don't cover the resizer's icon\n      props[isRtl ? 'marginLeft' : 'marginRight'] = 10 * 2; // 10 is a guesstimate of the icon's width\n    }\n    return props;\n  }\n}\nfunction renderPlainFgSegs(sortedFgSegs, {\n  todayRange,\n  nowDate,\n  eventSelection,\n  eventDrag,\n  eventResize\n}) {\n  let hiddenInstances = (eventDrag ? eventDrag.affectedInstances : null) || (eventResize ? eventResize.affectedInstances : null) || {};\n  return createElement(Fragment, null, sortedFgSegs.map(seg => {\n    let instanceId = seg.eventRange.instance.instanceId;\n    return createElement(\"div\", {\n      key: instanceId,\n      style: {\n        visibility: hiddenInstances[instanceId] ? 'hidden' : ''\n      }\n    }, createElement(TimeColEvent, Object.assign({\n      seg: seg,\n      isDragging: false,\n      isResizing: false,\n      isDateSelecting: false,\n      isSelected: instanceId === eventSelection,\n      isShort: false\n    }, getSegMeta(seg, todayRange, nowDate))));\n  }));\n}\nfunction computeSegVStyle(segVCoords) {\n  if (!segVCoords) {\n    return {\n      top: '',\n      bottom: ''\n    };\n  }\n  return {\n    top: segVCoords.start,\n    bottom: -segVCoords.end\n  };\n}\nfunction compileSegsFromEntries(segEntries, allSegs) {\n  return segEntries.map(segEntry => allSegs[segEntry.index]);\n}\nclass TimeColsContent extends BaseComponent {\n  constructor() {\n    super(...arguments);\n    this.splitFgEventSegs = memoize(splitSegsByCol);\n    this.splitBgEventSegs = memoize(splitSegsByCol);\n    this.splitBusinessHourSegs = memoize(splitSegsByCol);\n    this.splitNowIndicatorSegs = memoize(splitSegsByCol);\n    this.splitDateSelectionSegs = memoize(splitSegsByCol);\n    this.splitEventDrag = memoize(splitInteractionByCol);\n    this.splitEventResize = memoize(splitInteractionByCol);\n    this.rootElRef = createRef();\n    this.cellElRefs = new RefMap();\n  }\n  render() {\n    let {\n      props,\n      context\n    } = this;\n    let nowIndicatorTop = context.options.nowIndicator && props.slatCoords && props.slatCoords.safeComputeTop(props.nowDate); // might return void\n    let colCnt = props.cells.length;\n    let fgEventSegsByRow = this.splitFgEventSegs(props.fgEventSegs, colCnt);\n    let bgEventSegsByRow = this.splitBgEventSegs(props.bgEventSegs, colCnt);\n    let businessHourSegsByRow = this.splitBusinessHourSegs(props.businessHourSegs, colCnt);\n    let nowIndicatorSegsByRow = this.splitNowIndicatorSegs(props.nowIndicatorSegs, colCnt);\n    let dateSelectionSegsByRow = this.splitDateSelectionSegs(props.dateSelectionSegs, colCnt);\n    let eventDragByRow = this.splitEventDrag(props.eventDrag, colCnt);\n    let eventResizeByRow = this.splitEventResize(props.eventResize, colCnt);\n    return createElement(\"div\", {\n      className: \"fc-timegrid-cols\",\n      ref: this.rootElRef\n    }, createElement(\"table\", {\n      role: \"presentation\",\n      style: {\n        minWidth: props.tableMinWidth,\n        width: props.clientWidth\n      }\n    }, props.tableColGroupNode, createElement(\"tbody\", {\n      role: \"presentation\"\n    }, createElement(\"tr\", {\n      role: \"row\"\n    }, props.axis && createElement(\"td\", {\n      \"aria-hidden\": true,\n      className: \"fc-timegrid-col fc-timegrid-axis\"\n    }, createElement(\"div\", {\n      className: \"fc-timegrid-col-frame\"\n    }, createElement(\"div\", {\n      className: \"fc-timegrid-now-indicator-container\"\n    }, typeof nowIndicatorTop === 'number' && createElement(NowIndicatorContainer, {\n      elClasses: ['fc-timegrid-now-indicator-arrow'],\n      elStyle: {\n        top: nowIndicatorTop\n      },\n      isAxis: true,\n      date: props.nowDate\n    })))), props.cells.map((cell, i) => createElement(TimeCol, {\n      key: cell.key,\n      elRef: this.cellElRefs.createRef(cell.key),\n      dateProfile: props.dateProfile,\n      date: cell.date,\n      nowDate: props.nowDate,\n      todayRange: props.todayRange,\n      extraRenderProps: cell.extraRenderProps,\n      extraDataAttrs: cell.extraDataAttrs,\n      extraClassNames: cell.extraClassNames,\n      extraDateSpan: cell.extraDateSpan,\n      fgEventSegs: fgEventSegsByRow[i],\n      bgEventSegs: bgEventSegsByRow[i],\n      businessHourSegs: businessHourSegsByRow[i],\n      nowIndicatorSegs: nowIndicatorSegsByRow[i],\n      dateSelectionSegs: dateSelectionSegsByRow[i],\n      eventDrag: eventDragByRow[i],\n      eventResize: eventResizeByRow[i],\n      slatCoords: props.slatCoords,\n      eventSelection: props.eventSelection,\n      forPrint: props.forPrint\n    }))))));\n  }\n  componentDidMount() {\n    this.updateCoords();\n  }\n  componentDidUpdate() {\n    this.updateCoords();\n  }\n  updateCoords() {\n    let {\n      props\n    } = this;\n    if (props.onColCoords && props.clientWidth !== null // means sizing has stabilized\n    ) {\n      props.onColCoords(new PositionCache(this.rootElRef.current, collectCellEls(this.cellElRefs.currentMap, props.cells), true,\n      // horizontal\n      false));\n    }\n  }\n}\nfunction collectCellEls(elMap, cells) {\n  return cells.map(cell => elMap[cell.key]);\n}\n\n/* A component that renders one or more columns of vertical time slots\n----------------------------------------------------------------------------------------------------------------------*/\nclass TimeCols extends DateComponent {\n  constructor() {\n    super(...arguments);\n    this.processSlotOptions = memoize(processSlotOptions);\n    this.state = {\n      slatCoords: null\n    };\n    this.handleRootEl = el => {\n      if (el) {\n        this.context.registerInteractiveComponent(this, {\n          el,\n          isHitComboAllowed: this.props.isHitComboAllowed\n        });\n      } else {\n        this.context.unregisterInteractiveComponent(this);\n      }\n    };\n    this.handleScrollRequest = request => {\n      let {\n        onScrollTopRequest\n      } = this.props;\n      let {\n        slatCoords\n      } = this.state;\n      if (onScrollTopRequest && slatCoords) {\n        if (request.time) {\n          let top = slatCoords.computeTimeTop(request.time);\n          top = Math.ceil(top); // zoom can give weird floating-point values. rather scroll a little bit further\n          if (top) {\n            top += 1; // to overcome top border that slots beyond the first have. looks better\n          }\n          onScrollTopRequest(top);\n        }\n        return true;\n      }\n      return false;\n    };\n    this.handleColCoords = colCoords => {\n      this.colCoords = colCoords;\n    };\n    this.handleSlatCoords = slatCoords => {\n      this.setState({\n        slatCoords\n      });\n      if (this.props.onSlatCoords) {\n        this.props.onSlatCoords(slatCoords);\n      }\n    };\n  }\n  render() {\n    let {\n      props,\n      state\n    } = this;\n    return createElement(\"div\", {\n      className: \"fc-timegrid-body\",\n      ref: this.handleRootEl,\n      style: {\n        // these props are important to give this wrapper correct dimensions for interactions\n        // TODO: if we set it here, can we avoid giving to inner tables?\n        width: props.clientWidth,\n        minWidth: props.tableMinWidth\n      }\n    }, createElement(TimeColsSlats, {\n      axis: props.axis,\n      dateProfile: props.dateProfile,\n      slatMetas: props.slatMetas,\n      clientWidth: props.clientWidth,\n      minHeight: props.expandRows ? props.clientHeight : '',\n      tableMinWidth: props.tableMinWidth,\n      tableColGroupNode: props.axis ? props.tableColGroupNode : null /* axis depends on the colgroup's shrinking */,\n      onCoords: this.handleSlatCoords\n    }), createElement(TimeColsContent, {\n      cells: props.cells,\n      axis: props.axis,\n      dateProfile: props.dateProfile,\n      businessHourSegs: props.businessHourSegs,\n      bgEventSegs: props.bgEventSegs,\n      fgEventSegs: props.fgEventSegs,\n      dateSelectionSegs: props.dateSelectionSegs,\n      eventSelection: props.eventSelection,\n      eventDrag: props.eventDrag,\n      eventResize: props.eventResize,\n      todayRange: props.todayRange,\n      nowDate: props.nowDate,\n      nowIndicatorSegs: props.nowIndicatorSegs,\n      clientWidth: props.clientWidth,\n      tableMinWidth: props.tableMinWidth,\n      tableColGroupNode: props.tableColGroupNode,\n      slatCoords: state.slatCoords,\n      onColCoords: this.handleColCoords,\n      forPrint: props.forPrint\n    }));\n  }\n  componentDidMount() {\n    this.scrollResponder = this.context.createScrollResponder(this.handleScrollRequest);\n  }\n  componentDidUpdate(prevProps) {\n    this.scrollResponder.update(prevProps.dateProfile !== this.props.dateProfile);\n  }\n  componentWillUnmount() {\n    this.scrollResponder.detach();\n  }\n  queryHit(positionLeft, positionTop) {\n    let {\n      dateEnv,\n      options\n    } = this.context;\n    let {\n      colCoords\n    } = this;\n    let {\n      dateProfile\n    } = this.props;\n    let {\n      slatCoords\n    } = this.state;\n    let {\n      snapDuration,\n      snapsPerSlot\n    } = this.processSlotOptions(this.props.slotDuration, options.snapDuration);\n    let colIndex = colCoords.leftToIndex(positionLeft);\n    let slatIndex = slatCoords.positions.topToIndex(positionTop);\n    if (colIndex != null && slatIndex != null) {\n      let cell = this.props.cells[colIndex];\n      let slatTop = slatCoords.positions.tops[slatIndex];\n      let slatHeight = slatCoords.positions.getHeight(slatIndex);\n      let partial = (positionTop - slatTop) / slatHeight; // floating point number between 0 and 1\n      let localSnapIndex = Math.floor(partial * snapsPerSlot); // the snap # relative to start of slat\n      let snapIndex = slatIndex * snapsPerSlot + localSnapIndex;\n      let dayDate = this.props.cells[colIndex].date;\n      let time = addDurations(dateProfile.slotMinTime, multiplyDuration(snapDuration, snapIndex));\n      let start = dateEnv.add(dayDate, time);\n      let end = dateEnv.add(start, snapDuration);\n      return {\n        dateProfile,\n        dateSpan: Object.assign({\n          range: {\n            start,\n            end\n          },\n          allDay: false\n        }, cell.extraDateSpan),\n        dayEl: colCoords.els[colIndex],\n        rect: {\n          left: colCoords.lefts[colIndex],\n          right: colCoords.rights[colIndex],\n          top: slatTop,\n          bottom: slatTop + slatHeight\n        },\n        layer: 0\n      };\n    }\n    return null;\n  }\n}\nfunction processSlotOptions(slotDuration, snapDurationOverride) {\n  let snapDuration = snapDurationOverride || slotDuration;\n  let snapsPerSlot = wholeDivideDurations(slotDuration, snapDuration);\n  if (snapsPerSlot === null) {\n    snapDuration = slotDuration;\n    snapsPerSlot = 1;\n    // TODO: say warning?\n  }\n  return {\n    snapDuration,\n    snapsPerSlot\n  };\n}\nclass DayTimeColsSlicer extends Slicer {\n  sliceRange(range, dayRanges) {\n    let segs = [];\n    for (let col = 0; col < dayRanges.length; col += 1) {\n      let segRange = intersectRanges(range, dayRanges[col]);\n      if (segRange) {\n        segs.push({\n          start: segRange.start,\n          end: segRange.end,\n          isStart: segRange.start.valueOf() === range.start.valueOf(),\n          isEnd: segRange.end.valueOf() === range.end.valueOf(),\n          col\n        });\n      }\n    }\n    return segs;\n  }\n}\nclass DayTimeCols extends DateComponent {\n  constructor() {\n    super(...arguments);\n    this.buildDayRanges = memoize(buildDayRanges);\n    this.slicer = new DayTimeColsSlicer();\n    this.timeColsRef = createRef();\n  }\n  render() {\n    let {\n      props,\n      context\n    } = this;\n    let {\n      dateProfile,\n      dayTableModel\n    } = props;\n    let {\n      nowIndicator,\n      nextDayThreshold\n    } = context.options;\n    let dayRanges = this.buildDayRanges(dayTableModel, dateProfile, context.dateEnv);\n    // give it the first row of cells\n    // TODO: would move this further down hierarchy, but sliceNowDate needs it\n    return createElement(NowTimer, {\n      unit: nowIndicator ? 'minute' : 'day'\n    }, (nowDate, todayRange) => createElement(TimeCols, Object.assign({\n      ref: this.timeColsRef\n    }, this.slicer.sliceProps(props, dateProfile, null, context, dayRanges), {\n      forPrint: props.forPrint,\n      axis: props.axis,\n      dateProfile: dateProfile,\n      slatMetas: props.slatMetas,\n      slotDuration: props.slotDuration,\n      cells: dayTableModel.cells[0],\n      tableColGroupNode: props.tableColGroupNode,\n      tableMinWidth: props.tableMinWidth,\n      clientWidth: props.clientWidth,\n      clientHeight: props.clientHeight,\n      expandRows: props.expandRows,\n      nowDate: nowDate,\n      nowIndicatorSegs: nowIndicator && this.slicer.sliceNowDate(nowDate, dateProfile, nextDayThreshold, context, dayRanges),\n      todayRange: todayRange,\n      onScrollTopRequest: props.onScrollTopRequest,\n      onSlatCoords: props.onSlatCoords\n    })));\n  }\n}\nfunction buildDayRanges(dayTableModel, dateProfile, dateEnv) {\n  let ranges = [];\n  for (let date of dayTableModel.headerDates) {\n    ranges.push({\n      start: dateEnv.add(date, dateProfile.slotMinTime),\n      end: dateEnv.add(date, dateProfile.slotMaxTime)\n    });\n  }\n  return ranges;\n}\n\n// potential nice values for the slot-duration and interval-duration\n// from largest to smallest\nconst STOCK_SUB_DURATIONS = [{\n  hours: 1\n}, {\n  minutes: 30\n}, {\n  minutes: 15\n}, {\n  seconds: 30\n}, {\n  seconds: 15\n}];\nfunction buildSlatMetas(slotMinTime, slotMaxTime, explicitLabelInterval, slotDuration, dateEnv) {\n  let dayStart = new Date(0);\n  let slatTime = slotMinTime;\n  let slatIterator = createDuration(0);\n  let labelInterval = explicitLabelInterval || computeLabelInterval(slotDuration);\n  let metas = [];\n  while (asRoughMs(slatTime) < asRoughMs(slotMaxTime)) {\n    let date = dateEnv.add(dayStart, slatTime);\n    let isLabeled = wholeDivideDurations(slatIterator, labelInterval) !== null;\n    metas.push({\n      date,\n      time: slatTime,\n      key: date.toISOString(),\n      isoTimeStr: formatIsoTimeString(date),\n      isLabeled\n    });\n    slatTime = addDurations(slatTime, slotDuration);\n    slatIterator = addDurations(slatIterator, slotDuration);\n  }\n  return metas;\n}\n// Computes an automatic value for slotLabelInterval\nfunction computeLabelInterval(slotDuration) {\n  let i;\n  let labelInterval;\n  let slotsPerLabel;\n  // find the smallest stock label interval that results in more than one slots-per-label\n  for (i = STOCK_SUB_DURATIONS.length - 1; i >= 0; i -= 1) {\n    labelInterval = createDuration(STOCK_SUB_DURATIONS[i]);\n    slotsPerLabel = wholeDivideDurations(labelInterval, slotDuration);\n    if (slotsPerLabel !== null && slotsPerLabel > 1) {\n      return labelInterval;\n    }\n  }\n  return slotDuration; // fall back\n}\nclass DayTimeColsView extends TimeColsView {\n  constructor() {\n    super(...arguments);\n    this.buildTimeColsModel = memoize(buildTimeColsModel);\n    this.buildSlatMetas = memoize(buildSlatMetas);\n  }\n  render() {\n    let {\n      options,\n      dateEnv,\n      dateProfileGenerator\n    } = this.context;\n    let {\n      props\n    } = this;\n    let {\n      dateProfile\n    } = props;\n    let dayTableModel = this.buildTimeColsModel(dateProfile, dateProfileGenerator);\n    let splitProps = this.allDaySplitter.splitProps(props);\n    let slatMetas = this.buildSlatMetas(dateProfile.slotMinTime, dateProfile.slotMaxTime, options.slotLabelInterval, options.slotDuration, dateEnv);\n    let {\n      dayMinWidth\n    } = options;\n    let hasAttachedAxis = !dayMinWidth;\n    let hasDetachedAxis = dayMinWidth;\n    let headerContent = options.dayHeaders && createElement(DayHeader, {\n      dates: dayTableModel.headerDates,\n      dateProfile: dateProfile,\n      datesRepDistinctDays: true,\n      renderIntro: hasAttachedAxis ? this.renderHeadAxis : null\n    });\n    let allDayContent = options.allDaySlot !== false && (contentArg => createElement(DayTable, Object.assign({}, splitProps.allDay, {\n      dateProfile: dateProfile,\n      dayTableModel: dayTableModel,\n      nextDayThreshold: options.nextDayThreshold,\n      tableMinWidth: contentArg.tableMinWidth,\n      colGroupNode: contentArg.tableColGroupNode,\n      renderRowIntro: hasAttachedAxis ? this.renderTableRowAxis : null,\n      showWeekNumbers: false,\n      expandRows: false,\n      headerAlignElRef: this.headerElRef,\n      clientWidth: contentArg.clientWidth,\n      clientHeight: contentArg.clientHeight,\n      forPrint: props.forPrint\n    }, this.getAllDayMaxEventProps())));\n    let timeGridContent = contentArg => createElement(DayTimeCols, Object.assign({}, splitProps.timed, {\n      dayTableModel: dayTableModel,\n      dateProfile: dateProfile,\n      axis: hasAttachedAxis,\n      slotDuration: options.slotDuration,\n      slatMetas: slatMetas,\n      forPrint: props.forPrint,\n      tableColGroupNode: contentArg.tableColGroupNode,\n      tableMinWidth: contentArg.tableMinWidth,\n      clientWidth: contentArg.clientWidth,\n      clientHeight: contentArg.clientHeight,\n      onSlatCoords: this.handleSlatCoords,\n      expandRows: contentArg.expandRows,\n      onScrollTopRequest: this.handleScrollTopRequest\n    }));\n    return hasDetachedAxis ? this.renderHScrollLayout(headerContent, allDayContent, timeGridContent, dayTableModel.colCnt, dayMinWidth, slatMetas, this.state.slatCoords) : this.renderSimpleLayout(headerContent, allDayContent, timeGridContent);\n  }\n}\nfunction buildTimeColsModel(dateProfile, dateProfileGenerator) {\n  let daySeries = new DaySeriesModel(dateProfile.renderRange, dateProfileGenerator);\n  return new DayTableModel(daySeries, false);\n}\nvar css_248z = \".fc-v-event{background-color:var(--fc-event-bg-color);border:1px solid var(--fc-event-border-color);display:block}.fc-v-event .fc-event-main{color:var(--fc-event-text-color);height:100%}.fc-v-event .fc-event-main-frame{display:flex;flex-direction:column;height:100%}.fc-v-event .fc-event-time{flex-grow:0;flex-shrink:0;max-height:100%;overflow:hidden}.fc-v-event .fc-event-title-container{flex-grow:1;flex-shrink:1;min-height:0}.fc-v-event .fc-event-title{bottom:0;max-height:100%;overflow:hidden;top:0}.fc-v-event:not(.fc-event-start){border-top-left-radius:0;border-top-right-radius:0;border-top-width:0}.fc-v-event:not(.fc-event-end){border-bottom-left-radius:0;border-bottom-right-radius:0;border-bottom-width:0}.fc-v-event.fc-event-selected:before{left:-10px;right:-10px}.fc-v-event .fc-event-resizer-start{cursor:n-resize}.fc-v-event .fc-event-resizer-end{cursor:s-resize}.fc-v-event:not(.fc-event-selected) .fc-event-resizer{height:var(--fc-event-resizer-thickness);left:0;right:0}.fc-v-event:not(.fc-event-selected) .fc-event-resizer-start{top:calc(var(--fc-event-resizer-thickness)/-2)}.fc-v-event:not(.fc-event-selected) .fc-event-resizer-end{bottom:calc(var(--fc-event-resizer-thickness)/-2)}.fc-v-event.fc-event-selected .fc-event-resizer{left:50%;margin-left:calc(var(--fc-event-resizer-dot-total-width)/-2)}.fc-v-event.fc-event-selected .fc-event-resizer-start{top:calc(var(--fc-event-resizer-dot-total-width)/-2)}.fc-v-event.fc-event-selected .fc-event-resizer-end{bottom:calc(var(--fc-event-resizer-dot-total-width)/-2)}.fc .fc-timegrid .fc-daygrid-body{z-index:2}.fc .fc-timegrid-divider{padding:0 0 2px}.fc .fc-timegrid-body{min-height:100%;position:relative;z-index:1}.fc .fc-timegrid-axis-chunk{position:relative}.fc .fc-timegrid-axis-chunk>table,.fc .fc-timegrid-slots{position:relative;z-index:1}.fc .fc-timegrid-slot{border-bottom:0;height:1.5em}.fc .fc-timegrid-slot:empty:before{content:\\\"\\\\00a0\\\"}.fc .fc-timegrid-slot-minor{border-top-style:dotted}.fc .fc-timegrid-slot-label-cushion{display:inline-block;white-space:nowrap}.fc .fc-timegrid-slot-label{vertical-align:middle}.fc .fc-timegrid-axis-cushion,.fc .fc-timegrid-slot-label-cushion{padding:0 4px}.fc .fc-timegrid-axis-frame-liquid{height:100%}.fc .fc-timegrid-axis-frame{align-items:center;display:flex;justify-content:flex-end;overflow:hidden}.fc .fc-timegrid-axis-cushion{flex-shrink:0;max-width:60px}.fc-direction-ltr .fc-timegrid-slot-label-frame{text-align:right}.fc-direction-rtl .fc-timegrid-slot-label-frame{text-align:left}.fc-liquid-hack .fc-timegrid-axis-frame-liquid{bottom:0;height:auto;left:0;position:absolute;right:0;top:0}.fc .fc-timegrid-col.fc-day-today{background-color:var(--fc-today-bg-color)}.fc .fc-timegrid-col-frame{min-height:100%;position:relative}.fc-media-screen.fc-liquid-hack .fc-timegrid-col-frame{bottom:0;height:auto;left:0;position:absolute;right:0;top:0}.fc-media-screen .fc-timegrid-cols{bottom:0;left:0;position:absolute;right:0;top:0}.fc-media-screen .fc-timegrid-cols>table{height:100%}.fc-media-screen .fc-timegrid-col-bg,.fc-media-screen .fc-timegrid-col-events,.fc-media-screen .fc-timegrid-now-indicator-container{left:0;position:absolute;right:0;top:0}.fc .fc-timegrid-col-bg{z-index:2}.fc .fc-timegrid-col-bg .fc-non-business{z-index:1}.fc .fc-timegrid-col-bg .fc-bg-event{z-index:2}.fc .fc-timegrid-col-bg .fc-highlight{z-index:3}.fc .fc-timegrid-bg-harness{left:0;position:absolute;right:0}.fc .fc-timegrid-col-events{z-index:3}.fc .fc-timegrid-now-indicator-container{bottom:0;overflow:hidden}.fc-direction-ltr .fc-timegrid-col-events{margin:0 2.5% 0 2px}.fc-direction-rtl .fc-timegrid-col-events{margin:0 2px 0 2.5%}.fc-timegrid-event-harness{position:absolute}.fc-timegrid-event-harness>.fc-timegrid-event{bottom:0;left:0;position:absolute;right:0;top:0}.fc-timegrid-event-harness-inset .fc-timegrid-event,.fc-timegrid-event.fc-event-mirror,.fc-timegrid-more-link{box-shadow:0 0 0 1px var(--fc-page-bg-color)}.fc-timegrid-event,.fc-timegrid-more-link{border-radius:3px;font-size:var(--fc-small-font-size)}.fc-timegrid-event{margin-bottom:1px}.fc-timegrid-event .fc-event-main{padding:1px 1px 0}.fc-timegrid-event .fc-event-time{font-size:var(--fc-small-font-size);margin-bottom:1px;white-space:nowrap}.fc-timegrid-event-short .fc-event-main-frame{flex-direction:row;overflow:hidden}.fc-timegrid-event-short .fc-event-time:after{content:\\\"\\\\00a0-\\\\00a0\\\"}.fc-timegrid-event-short .fc-event-title{font-size:var(--fc-small-font-size)}.fc-timegrid-more-link{background:var(--fc-more-link-bg-color);color:var(--fc-more-link-text-color);cursor:pointer;margin-bottom:1px;position:absolute;z-index:9999}.fc-timegrid-more-link-inner{padding:3px 2px;top:0}.fc-direction-ltr .fc-timegrid-more-link{right:0}.fc-direction-rtl .fc-timegrid-more-link{left:0}.fc .fc-timegrid-now-indicator-arrow,.fc .fc-timegrid-now-indicator-line{pointer-events:none}.fc .fc-timegrid-now-indicator-line{border-color:var(--fc-now-indicator-color);border-style:solid;border-width:1px 0 0;left:0;position:absolute;right:0;z-index:4}.fc .fc-timegrid-now-indicator-arrow{border-color:var(--fc-now-indicator-color);border-style:solid;margin-top:-5px;position:absolute;z-index:4}.fc-direction-ltr .fc-timegrid-now-indicator-arrow{border-bottom-color:transparent;border-top-color:transparent;border-width:5px 0 5px 6px;left:0}.fc-direction-rtl .fc-timegrid-now-indicator-arrow{border-bottom-color:transparent;border-top-color:transparent;border-width:5px 6px 5px 0;right:0}\";\ninjectStyles(css_248z);\nexport { DayTimeCols, DayTimeColsSlicer, DayTimeColsView, TimeCols, TimeColsSlatsCoords, TimeColsView, buildDayRanges, buildSlatMetas, buildTimeColsModel };", "import { createPlugin } from '@fullcalendar/core/index.js';\nimport { DayTimeColsView } from './internal.js';\nimport '@fullcalendar/core/internal.js';\nimport '@fullcalendar/core/preact.js';\nimport '@fullcalendar/daygrid/internal.js';\nconst OPTION_REFINERS = {\n  allDaySlot: Boolean\n};\nvar index = createPlugin({\n  name: '@fullcalendar/timegrid',\n  initialView: 'timeGridWeek',\n  optionRefiners: OPTION_REFINERS,\n  views: {\n    timeGrid: {\n      component: DayTimeColsView,\n      usesMinMaxTime: true,\n      allDaySlot: true,\n      slotDuration: '00:30:00',\n      slotEventOverlap: true // a bad name. confused with overlap/constraint system\n    },\n    timeGridDay: {\n      type: 'timeGrid',\n      duration: {\n        days: 1\n      }\n    },\n    timeGridWeek: {\n      type: 'timeGrid',\n      duration: {\n        weeks: 1\n      }\n    }\n  }\n});\nexport { index as default };"],
  "mappings": "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",
  "names": []
}
